name: Run Database Migrations

on:
  workflow_call:
    inputs:
      workflow_call:
        type: boolean
        required: false
        default: false
    secrets:
      DB_USERNAME:
        required: true
      DB_PASSWORD:
        required: true
      DB_NAME:
        required: true
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      DB_PORT:
        required: true

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # TODO: Uncomment
      # - name: Install pnpm
      #   uses: pnpm/action-setup@v2
      #   with:
      #     version: 8

      # - name: Get pnpm store directory
      #   shell: bash
      #   run: |
      #     echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # - name: Setup pnpm cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      - name: Check for migration changes
        id: check_changes
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -c "packages/core/drizzle/" || true)
          echo "has_changes=$CHANGES" >> $GITHUB_OUTPUT

      # TODO: Uncomment
      # - name: Install dependencies
      #   working-directory: packages/core
      #   run: pnpm install

      - name: Run database migrations
        working-directory: packages/core
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          # Start SSH tunnel with keep-alive settings
          ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=2 -f -N -L ${{ secrets.DB_PORT }}:${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}

          # Test direct connection with psql
          psql "postgresql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" || echo "Direct psql connection failed"

          # Run migrations with increased logging and explicit SSL settings
          pnpm db:migrate
        env:
          DATABASE_URL: postgresql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
          NODE_ENV: production

      - name: Cleanup SSH tunnel
        if: always()
        run: |
          pkill -f "ssh -f -N -L ${{ secrets.DB_PORT }}"
          rm -f ~/.ssh/id_ed25519
          rm -f ~/.ssh/known_hosts
